{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPCPKScLG4JC+0aohsbSwX2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/venkat7396/python/blob/master/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bf0kLNRiIAYx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LWILI-l1IZsb",
        "colab_type": "text"
      },
      "source": [
        "1.python program to convert binary number to decimal"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FQpCP13TIkgq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "65985a80-d29c-4fcd-d7cd-556faa9efb2d"
      },
      "source": [
        "b_num= list(input('input a binary numbrer'))\n",
        "value =0\n",
        "\n",
        "for i in range(len(b_num)):\n",
        "\tdigit = b_num.pop()\n",
        "\tif digit == '1':\n",
        "\t\tvalue = value + pow(2, i)\n",
        "print(\"The decimal value of the number is\", value)\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input a binary numbrer10010001\n",
            "The decimal value of the number is 145\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8JRnoiu4La9R",
        "colab_type": "text"
      },
      "source": [
        "# Python program to generate N number of fibonacci numbers take n value from user. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HsutxqATLry9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "755d642c-d2b6-4b45-c90b-500f72a035a9"
      },
      "source": [
        "n= int(input('how many terms'))\n",
        "\n",
        "n1, n2 = 0, 1\n",
        "count = 0\n",
        "\n",
        "if n<= 0:\n",
        "   print(\"Please enter a positive integer\")\n",
        "elif n == 1:\n",
        "   print(\"Fibonacci sequence upto\",n,\":\")\n",
        "   print(n1)\n",
        "else:\n",
        "   print(\"Fibonacci sequence:\")\n",
        "   while count < n:\n",
        "       print(n1)\n",
        "       nth = n1 + n2\n",
        "    # update values\n",
        "       n1 = n2\n",
        "       n2 = nth\n",
        "       count += 1\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "how many terms4\n",
            "Fibonacci sequence:\n",
            "0\n",
            "1\n",
            "1\n",
            "2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qlVU5jTGMT_V",
        "colab_type": "text"
      },
      "source": [
        "# Python program to display multiplication table of num.Take num value from the user.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yOKmneEgMcx2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "b60ac6ea-6604-4582-cebb-205ed8e23fc1"
      },
      "source": [
        " num = int(input(\"Enter the number to display multiplication table: \"))\n",
        "\n",
        "for i in range(1, 11):\n",
        "   print(num, 'x', i, '=', num*i)\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the number to display multiplication table: 4\n",
            "4 x 1 = 4\n",
            "4 x 2 = 8\n",
            "4 x 3 = 12\n",
            "4 x 4 = 16\n",
            "4 x 5 = 20\n",
            "4 x 6 = 24\n",
            "4 x 7 = 28\n",
            "4 x 8 = 32\n",
            "4 x 9 = 36\n",
            "4 x 10 = 40\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g-soJGwaM7Wn",
        "colab_type": "text"
      },
      "source": [
        "# Python program to take 10 integers from keyboard using loop and print their average value on the screen.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "36fIOLnpNBJW",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H_Ruw0eoNBdD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "37f69974-b419-4d13-e301-bb78a7f6d384"
      },
      "source": [
        "sum = 0\n",
        "\n",
        "i = 10\n",
        "while i>0:\n",
        "  print (\"Enter number\")\n",
        "  num = int(input())\n",
        "  sum = sum + num\n",
        "  i = i-1\n",
        "print (\"average is\",sum/10.0)\n",
        "# to print the patern\n",
        "i = 1\n",
        "while i<=4:\n",
        "  print (\"*\"*i)\n",
        "  i = i+1"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter number\n",
            "1\n",
            "Enter number\n",
            "2\n",
            "Enter number\n",
            "3\n",
            "Enter number\n",
            "4\n",
            "Enter number\n",
            "5\n",
            "Enter number\n",
            "6\n",
            "Enter number\n",
            "7\n",
            "Enter number\n",
            "8\n",
            "Enter number\n",
            "9\n",
            "Enter number\n",
            "0\n",
            "average is 4.5\n",
            "*\n",
            "**\n",
            "***\n",
            "****\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NGcxILfmN_mM",
        "colab_type": "text"
      },
      "source": [
        "# Python program to find greatest common divisor (gcd) or highest common factor of given two numbers.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uW72-oY5OAoS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "0ff4777a-1e2e-4f06-8757-2554b087dd30"
      },
      "source": [
        "def gcd(a,b): \n",
        "       \n",
        "    if (a == 0): \n",
        "        return b \n",
        "    if (b == 0): \n",
        "        return a \n",
        "   \n",
        "    if (a == b): \n",
        "        return a \n",
        "  \n",
        "    if (a > b): \n",
        "        return gcd(a-b, b) \n",
        "    return gcd(a, b-a) \n",
        "   \n",
        "a = int(input(\"Enter the value of a: \"))\n",
        "b = int(input(\"Enter the value of b: \"))\n",
        "if(gcd(a, b)): \n",
        "    print('GCD of', a, 'and', b, 'is', gcd(a, b)) \n",
        "else: \n",
        "    print('not found')\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the value of a: 4\n",
            "Enter the value of b: 3\n",
            "GCD of 4 and 3 is 1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZvgYqeHKOOAe",
        "colab_type": "text"
      },
      "source": [
        "# Python program that accepts a word from the user and reverse it.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "az8vPxeJOSa9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ac87fc40-8df0-42d2-c22a-7a82fea18f61"
      },
      "source": [
        "word = input(\"Input a word to reverse: \")\n",
        "\n",
        "for char in range(len(word) - 1, -1, -1):\n",
        "  print(word[char], end=\"\")\n",
        "print(\"\\n\")\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Input a word to reverse: venkat\n",
            "taknev\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AU7C8KDeOdy2",
        "colab_type": "text"
      },
      "source": [
        "# Python program to to count the number of even and odd numbers from a series of numbers.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FO-TLx7-OjGs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "a35cfbe4-5c27-4257-8aee-8fd70765f1f9"
      },
      "source": [
        "numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n",
        "count_odd = 0\n",
        "count_even = 0\n",
        "for x in numbers:\n",
        "        if not x % 2:\n",
        "    \t     count_even+=1\n",
        "        else:\n",
        "    \t     count_odd+=1\n",
        "print(\"Number of even numbers :\",count_even)\n",
        "print(\"Number of odd numbers :\",count_odd)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of even numbers : 4\n",
            "Number of odd numbers : 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3SgmoK44Ork6",
        "colab_type": "text"
      },
      "source": [
        "# Python program that prints all of the numbers from 0 to 6 except 3 and 6.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fz58hy2kOyAq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "54861ec8-4d91-4c4f-92df-52c78731d33e"
      },
      "source": [
        "for x in range(6):\n",
        "    if (x ==3 or x==6):\n",
        "        continue\n",
        "    print(x,end=' ')\n",
        "print(\"\\n\")\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 1 2 4 5 \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kO99zcEZLvNj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
